trigger:
- '*'

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  webDir: 'Tailspin.SpaceGame.Web'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '8.x'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    packageType: sdk
    version: '$(dotnetSdkVersion)'
    performMultiLevelLookup: true

- task: NodeTool@0
  displayName: 'Use Node 16.x'
  inputs:
    versionSpec: '16.x'
    checkLatest: true

- task: Npm@1
  displayName: 'npm ci'
  inputs:
    command: 'ci'
    workingDirectory: Tailspin.SpaceGame.Web
    verbose: false

# Sass: Webプロジェクト直下で npx を使う
- script: |
    npx node-sass wwwroot --output wwwroot
  displayName: 'Compile Sass assets'
  workingDirectory: '$(webDir)'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: UseDotNet@2
  displayName: 'Use .NET SDK 8.x (default)'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetSdkVersion)'   # ← 最後に入れて既定にする
  
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()